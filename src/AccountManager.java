/**
 * Абстрактный класс, который управляет созданием и удалением аккаунтов, он обязательно должен проверять
 * необходимые условия для создания и удаления пользователей из базы данных {@link UserProvider}
 *
 * Необходимо подумать об условиях, когда мы не можем создать пользователя в базе данных {@link UserProvider}
 */
public abstract class AccountManager {
    /**
     * Создает пользователя с указанными аргументами в базе данных
     * @param email почта пользователя
     * @param fullName ФИО пользователя
     * @param phoneNumber телефонный номер пользователя
     * @return Возвращает {@link ResultWithReason}, в котором содержится информация о создании пользователя в
     * базе данных {@link UserProvider}
     */
    abstract ResultWithReason create(String email, String fullName, String phoneNumber);

    /**
     * Удаляет пользователя из базы данных.
     * @param email Почта пользователя, по которому необходимо удалить из базы данных
     * @return Возвращает {@link ResultWithEmail}, в котором содержится информация об удалении пользователя в
     * базе данных {@link UserProvider}
     */
    abstract ResultWithReason delete(String email);
}

/**
 * Абстрактный класс, который содержит в себе список пользователей. Указаные пользователи
 * в этой базе данных, могут успешно получить код для авторизации.
 *
 * **ВАЖНО** реализовывать базу данных для хранения пользователей не нужно, можно использовать просто HashMap.
 */
abstract class UserProviderr {

    /**
     * Метод должен создавать пользователя в базе данных
     * @param user Пользователь, которого нам необходимо занести в базу данных
     * @return Возвращает true, если нам удалось успешно добавить пользователя в базу данных, иначе false
     */
    abstract void createUser(User user);

    /**
     * Удалят пользователя с базы данных
     * @param email почта пользователя, которого мы должны удалить
     * @return Возвращает true, если нам удалось успешно удалить пользователя, иначе false
     */
    abstract void deleteUser(String email);
    /**
     * Данный метод проверяет, если ли пользователь с таким email в нашей базе данных
     * @param email Почта клиента
     * @return Возвращает true, если удалось найти данного пользователя в базе данных, иначе false
     */
    abstract boolean hasUserByEmail(String email);
}


/**
 * Абстрактный класс, который может содержать в себе необходимые знания об результате операци
 */
abstract class ResultWithReason {

    /**
     * Возвращает результат операции
     * @return true если операция была успешно выполнена, иначе false
     */
    abstract boolean getResult();

    /**
     * Возвращает причину операции. Например, если наша операция была не выполнена, то мы можем посмотреть,
     * по какой причине она была не выполнена
     * @return Возвращает причину, по которой она была не выполнена
     * Дополнительно: а если она будет выполнена успешно, то может вернуть какую-нибудь успешную причину?
     */
    abstract String getReason();
}

/**
 * Абстрактный класс, от которого могут быть реализованы необходимые причины с переопределенным текстом
 * самой причины
 */
abstract class Reason {
    /**
     * Возвращает текст причины
     * @return текст
     */
    abstract String getText();
}